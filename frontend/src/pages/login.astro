---
import Layout from '~/layouts/PageLayout.astro';
const metadata = { title: 'Sign In' };
---

<Layout metadata={metadata}>
  <main class="max-w-md mx-auto mt-16 mb-16 p-6 bg-white dark:bg-slate-800 rounded-xl shadow">
    <h1 class="text-2xl font-bold mb-6 text-center" id="form-title">Sign In</h1>

    <!-- Signup/Login Form -->
    <form id="auth-form" class="space-y-4">
      <!-- Name fields (only for signup) -->
      <div id="name-fields" class="hidden">
        <div>
          <input 
            id="first-name" 
            type="text" 
            class="w-full px-3 py-2 rounded border border-gray-300 dark:border-slate-600 bg-white dark:bg-slate-700" 
            placeholder="First Name"
          />
        </div>
        <div class="mt-3">
          <input 
            id="last-name" 
            type="text" 
            class="w-full px-3 py-2 rounded border border-gray-300 dark:border-slate-600 bg-white dark:bg-slate-700" 
            placeholder="Last Name"
          />
        </div>
      </div>

      <!-- Email -->
      <div>
        <input 
          id="email" 
          type="email" 
          required 
          class="w-full px-3 py-2 rounded border border-gray-300 dark:border-slate-600 bg-white dark:bg-slate-700" 
          placeholder="Email"
        />
      </div>

      <!-- Password -->
      <div>
        <input 
          id="password" 
          type="password" 
          required 
          minlength="8"
          class="w-full px-3 py-2 rounded border border-gray-300 dark:border-slate-600 bg-white dark:bg-slate-700" 
          placeholder="Password"
        />
      </div>

      <!-- Submit Button -->
      <button 
        type="submit" 
        id="submit-btn"
        class="w-full py-2 rounded bg-gray-300 dark:bg-slate-600 text-gray-800 dark:text-gray-100 font-medium hover:bg-gray-400 dark:hover:bg-slate-500"
      >
        Sign In
      </button>

      <!-- Toggle text (below button) -->
      <p class="text-center text-sm text-gray-600 dark:text-gray-400 mt-3">
        <span id="toggle-text">Need an account? </span>
        <a href="#" id="toggle-link" class="text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300 font-medium">Sign Up</a>
      </p>
    </form>

    <!-- Messages -->
    <div id="messages" class="mt-4 text-sm"></div>
  </main>

  <script is:inline>
    const API_BASE = 'http://localhost:3001/api/user-auth';
    
    // Form elements
    const form = document.getElementById('auth-form');
    const formTitle = document.getElementById('form-title');
    const nameFields = document.getElementById('name-fields');
    const firstNameInput = document.getElementById('first-name');
    const lastNameInput = document.getElementById('last-name');
    const emailInput = document.getElementById('email');
    const passwordInput = document.getElementById('password');
    const submitBtn = document.getElementById('submit-btn');
    const toggleText = document.getElementById('toggle-text');
    const toggleLink = document.getElementById('toggle-link');
    const messages = document.getElementById('messages');
    
    // Get return URL from query params
    const returnTo = new URLSearchParams(window.location.search).get('returnTo') || '/';
    
    // Track current mode - default to login
    let mode = 'login';
    
    // Display message helper
    function showMessage(msg, type = 'info') {
      const textColor = type === 'error' ? 'text-red-600 dark:text-red-400' : 
                        type === 'success' ? 'text-green-600 dark:text-green-400' : 
                        'text-blue-600 dark:text-blue-400';
      messages.innerHTML = `<div class="${textColor}">${msg}</div>`;
    }
    
    // Toggle between signup and login
    function updateMode() {
      if (mode === 'signup') {
        formTitle.textContent = 'Sign Up';
        submitBtn.textContent = 'Sign Up';
        toggleText.textContent = 'Have an account? ';
        toggleLink.textContent = 'Sign In';
        passwordInput.placeholder = 'Password (min 8 characters)';
        nameFields.classList.remove('hidden');
        firstNameInput.required = true;
        lastNameInput.required = true;
      } else {
        formTitle.textContent = 'Sign In';
        submitBtn.textContent = 'Sign In';
        toggleText.textContent = 'Need an account? ';
        toggleLink.textContent = 'Sign Up';
        passwordInput.placeholder = 'Password';
        nameFields.classList.add('hidden');
        firstNameInput.required = false;
        lastNameInput.required = false;
      }
      messages.innerHTML = '';
    }
    
    // Toggle mode link
    toggleLink.addEventListener('click', (e) => {
      e.preventDefault();
      mode = mode === 'signup' ? 'login' : 'signup';
      updateMode();
    });
    
    // Form submission
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const email = emailInput.value.trim();
      const password = passwordInput.value;
      const firstName = firstNameInput.value.trim();
      const lastName = lastNameInput.value.trim();
      
      // Validation
      if (!email || !password) {
        showMessage('Please fill in all required fields', 'error');
        return;
      }
      
      // Only validate password length for signup
      if (mode === 'signup') {
        if (password.length < 8) {
          showMessage('Password must be at least 8 characters', 'error');
          return;
        }
        
        if (!firstName || !lastName) {
          showMessage('Please enter your first and last name', 'error');
          return;
        }
      }
      
      // Disable form while processing
      submitBtn.disabled = true;
      submitBtn.textContent = mode === 'signup' ? 'Creating account...' : 'Logging in...';
      
      try {
        const endpoint = mode === 'signup' ? '/signup' : '/login';
        const body = mode === 'signup' 
          ? { email, password, firstName, lastName }
          : { email, password };
        
        const response = await fetch(`${API_BASE}${endpoint}`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          credentials: 'include', // Important for session cookies
          body: JSON.stringify(body)
        });
        
        const data = await response.json();
        
        if (!response.ok) {
          // Show appropriate error message based on mode
          const errorMessage = mode === 'login' 
            ? 'The e-mail address and/or password you specified are not correct' 
            : (data.error || 'Authentication failed');
          showMessage(errorMessage, 'error');
          submitBtn.disabled = false;
          submitBtn.textContent = mode === 'signup' ? 'Sign Up' : 'Sign In';
          return;
        }
        
        // Success - redirect immediately (keep loading state visible)
        window.location.href = returnTo;
        
      } catch (error) {
        console.error('Auth error:', error);
        showMessage('Network error. Please try again.', 'error');
        submitBtn.disabled = false;
        submitBtn.textContent = mode === 'signup' ? 'Sign Up' : 'Sign In';
      }
    });
    
    // Initialize
    updateMode();
  </script>
</Layout>
