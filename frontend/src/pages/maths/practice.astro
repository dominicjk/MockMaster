---
import Layout from '~/layouts/PageLayout.astro';
import PracticeTopicCard from '~/components/maths/PracticeTopicCard.astro';
import PracticeLevelCard from '~/components/maths/PracticeLevelCard.astro';
import NumberSystemsIconUrl from '~/assets/images/subject-icons/math-icons/NumberSystems.svg?url';
import AlgebraIconUrl from '~/assets/images/subject-icons/math-icons/Algebra.svg?url';
import SequencesAndSeriesIconUrl from '~/assets/images/subject-icons/math-icons/SequencesAndSeries.svg?url';
import FinancialMathsIconUrl from '~/assets/images/subject-icons/math-icons/FinancialMaths.svg?url';
import InductionIconUrl from '~/assets/images/subject-icons/math-icons/Induction.svg?url';
import ComplexNumbersIconUrl from '~/assets/images/subject-icons/math-icons/ComplexNumbers.svg?url';
import TheLineIconUrl from '~/assets/images/subject-icons/math-icons/TheLine.svg?url';
import ProbabilityIconUrl from '~/assets/images/subject-icons/math-icons/Probability.svg?url';
import StatisticsIconUrl from '~/assets/images/subject-icons/math-icons/Statistics.svg?url';
import TrigonometryIconUrl from '~/assets/images/subject-icons/math-icons/Trigonometry.svg?url';
import TheCircleIconUrl from '~/assets/images/subject-icons/math-icons/Circle.svg?url';
import GeometryIconUrl from '~/assets/images/subject-icons/math-icons/Geometry.svg?url';

const metadata = {
  title: 'Maths - Practice',
};

interface Topic {
  id: string;
  title: string;
  iconSrc?: string;
}

const paper1Topics: Topic[] = [
  { id: 'number', title: 'Number Systems', iconSrc: NumberSystemsIconUrl },
  { id: 'algebra', title: 'Algebra', iconSrc: AlgebraIconUrl },
  { id: 'complex-numbers', title: 'Complex Numbers', iconSrc: ComplexNumbersIconUrl },
  { id: 'sequences-and-series', title: 'Sequences & Series', iconSrc: SequencesAndSeriesIconUrl },
  { id: 'financial-maths', title: 'Financial Maths', iconSrc: FinancialMathsIconUrl },
  { id: 'induction', title: 'Induction', iconSrc: InductionIconUrl },
  { id: 'functions', title: 'Functions' },
  { id: 'differentiation', title: 'Differentiation' },
  { id: 'integration', title: 'Integration' },
];

const paper2Topics: Topic[] = [
  { id: 'the-line', title: 'Coord. Geometry > The Line', iconSrc: TheLineIconUrl },
  { id: 'the-circle', title: 'Coord. Geometry > The Circle', iconSrc: TheCircleIconUrl },
  { id: 'geometry', title: 'Geometry', iconSrc: GeometryIconUrl },
  { id: 'trigonometry', title: 'Trigonometry', iconSrc: TrigonometryIconUrl },
  { id: 'probability', title: 'Probability', iconSrc: ProbabilityIconUrl },
  { id: 'statistics', title: 'Statistics', iconSrc: StatisticsIconUrl },
];
---
<Layout metadata={metadata}>
  <!-- Light pink background section -->
  <div class="bg-pink-50 dark:bg-pink-950/20">
    <section class="py-12">
      <div class="w-[80%] max-w-6xl mx-auto px-4 md:px-6">
        <div class="text-center mb-8">
          <h1 class="text-4xl font-bold mb-4">Practice Maths</h1>
          <p class="text-lg text-gray-700 dark:text-gray-300 mb-6">
            Test your skills with exam-style practice questions and solutions.
          </p>
        </div>

        <div class="sticky top-0 z-10 bg-white/70 dark:bg-slate-900/70 backdrop-blur supports-[backdrop-filter]:bg-white/50 dark:supports-[backdrop-filter]:bg-slate-900/50 border border-gray-200 dark:border-slate-700 rounded-xl p-4 mb-4">
          <div class="flex items-center justify-between gap-4">
            <div class="grow min-w-0">
              <p id="selectionHint" class="text-sm text-gray-700 dark:text-gray-300">Select multiple subjects to practice together.</p>
              <div id="selectedHeaderTags" class="hidden flex flex-nowrap gap-2 overflow-x-auto overflow-y-hidden h-9 items-center"></div>
            </div>
            <button id="globalStart" class="bg-red-600 hover:bg-red-700 disabled:bg-gray-300 disabled:cursor-not-allowed text-white px-4 py-2 rounded-lg transition" disabled>
              Start Practice
            </button>
          </div>
        </div>

        <div class="mb-6 flex flex-col md:flex-row md:items-start md:justify-between gap-4">
        <div class="relative">
          <button id="optionsToggle" class="inline-flex items-center gap-2 px-4 py-2 rounded-lg border border-gray-200 dark:border-slate-700 bg-white dark:bg-slate-800 text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-slate-700 transition" aria-expanded="false" aria-controls="optionsPanel">
            Advanced Filter
            <svg width="16" height="16" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true"><path d="M5.23 7.21a.75.75 0 011.06.02L10 10.94l3.71-3.71a.75.75 0 111.06 1.06l-4.24 4.24a.75.75 0 01-1.06 0L5.25 8.29a.75.75 0 01-.02-1.08z"/></svg>
          </button>
          <div id="optionsPanel" class="hidden absolute mt-2 z-20 w-80 sm:w-96 bg-white dark:bg-slate-800 border border-gray-200 dark:border-slate-700 rounded-xl shadow-lg p-4">
            <div class="space-y-4">
              <div class="flex flex-col gap-3">
                <label class="inline-flex items-center gap-2 text-sm text-gray-700 dark:text-gray-300">
                  <input id="optionsExamOnly" type="checkbox" class="h-4 w-4 accent-red-600" /> State Exam Questions Only
                </label>
                <label class="inline-flex items-center gap-2 text-sm text-gray-700 dark:text-gray-300">
                  <input id="optionsLongOnly" type="checkbox" class="h-4 w-4 accent-red-600" /> Long Questions Only
                </label>
                <label class="inline-flex items-center gap-2 text-sm text-gray-700 dark:text-gray-300">
                  <input id="optionsShortOnly" type="checkbox" class="h-4 w-4 accent-red-600" /> Short Questions Only
                </label>
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Year Range</label>
                <div class="flex items-center gap-2">
                  <select id="optionsYearFrom" class="block w-full rounded-md border-gray-300 dark:border-slate-600 bg-white dark:bg-slate-800 text-gray-900 dark:text-gray-100 focus:border-red-500 focus:ring-red-500">
                    <option value="2024" selected>2024</option>
                    <option value="2024 Deferred">2024 Deferred</option>
                    <option value="2023">2023</option>
                    <option value="2023 Deferred">2023 Deferred</option>
                    <option value="2022">2022</option>
                    <option value="2021">2021</option>
                    <option value="2020">2020</option>
                    <option value="2019">2019</option>
                    <option value="2018">2018</option>
                    <option value="2017">2017</option>
                    <option value="2016">2016</option>
                    <option value="2015">2015</option>
                  </select>
                  <span class="text-gray-500 dark:text-gray-400">to</span>
                  <select id="optionsYearTo" class="block w-full rounded-md border-gray-300 dark:border-slate-600 bg-white dark:bg-slate-800 text-gray-900 dark:text-gray-100 focus:border-red-500 focus:ring-red-500">
                    <option value="2024">2024</option>
                    <option value="2023">2023</option>
                    <option value="2022" selected>2022</option>
                    <option value="2021">2021</option>
                    <option value="2020">2020</option>
                    <option value="2019">2019</option>
                    <option value="2018">2018</option>
                    <option value="2017">2017</option>
                    <option value="2016">2016</option>
                    <option value="2015">2015</option>
                  </select>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div class="grid grid-cols-2 sm:grid-cols-4 gap-3 md:gap-4">
          <PracticeLevelCard id="level-1" title="Beginner" description="Gentle introduction with fundamentals and guided steps." >
            <div slot="icon" class="text-gray-400">L1</div>
          </PracticeLevelCard>
          <PracticeLevelCard id="level-2" title="Ordinary Level" description="Standard difficulty aligned to Ordinary Level exams.">
            <div slot="icon" class="text-gray-400">L2</div>
          </PracticeLevelCard>
          <PracticeLevelCard id="level-3" title="Higher Level" description="Challenging questions targeting Higher Level exams.">
            <div slot="icon" class="text-gray-400">L3</div>
          </PracticeLevelCard>
          <PracticeLevelCard id="level-4" title="Hardcore" description="Most challenging problems for Higher Level standard.">
            <div slot="icon" class="text-gray-400">L4</div>
          </PracticeLevelCard>
        </div>
      </div>

      <div class="mb-6 flex items-center gap-4">
        <label class="inline-flex items-center gap-2 cursor-pointer select-none">
          <input id="selectAll" type="checkbox" class="h-4 w-4 accent-red-600" />
          <span class="text-sm text-gray-700 dark:text-gray-300">Select all subjects</span>
        </label>
      </div>
    </div>
    </section>
  </div>

  <!-- Regular background section for Paper 1 and Paper 2 -->
  <section class="py-8">
    <div class="w-[80%] max-w-6xl mx-auto px-4 md:px-6">
      <div class="space-y-12">
        <section>
          <h2 class="text-3xl font-extrabold mb-6">Paper 1</h2>
          <div class="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6 md:gap-8 items-stretch">
            {paper1Topics.map((topic) => (
              <PracticeTopicCard id={topic.id} title={topic.title} iconSrc={topic.iconSrc ?? `/icons/${topic.id}.svg`}>
              </PracticeTopicCard>
            ))}
          </div>
        </section>

        <section>
          <h2 class="text-3xl font-extrabold mb-6">Paper 2</h2>
          <div class="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6 md:gap-8 items-stretch">
            {paper2Topics.map((topic) => (
              <PracticeTopicCard id={topic.id} title={topic.title} iconSrc={topic.iconSrc ?? `/icons/${topic.id}.svg`}>
              </PracticeTopicCard>
            ))}
          </div>
        </section>
      </div>
    </div>


    <!-- <Pdf url="~/assets/questions/RandomQuestion.pdf" /> -->

  </section>

  <script>
    const checkboxSelector = '.topic-checkbox';
    const levelCheckboxSelector = '.level-checkbox';
    const globalStartButton = document.getElementById('globalStart');
    const selectionHintEl = document.getElementById('selectionHint');
    const selectedHeaderTagsContainer = document.getElementById('selectedHeaderTags');
    const selectAllCheckbox = document.getElementById('selectAll');

    const optionsToggle = document.getElementById('optionsToggle');
    const optionsPanel = document.getElementById('optionsPanel');

    function isHtmlInputElement(el) {
      return el instanceof HTMLInputElement;
    }

    function getAllTopicInputs() {
      return Array.from(document.querySelectorAll(checkboxSelector)).filter((el) => isHtmlInputElement(el));
    }

    function getSelectedTopics() {
      const inputs = getAllTopicInputs();
      const checkedInputs = inputs.filter((el) => el.checked);
      return checkedInputs.map((el) => ({ id: el.dataset.topicId || '', title: el.dataset.topicTitle || '' }));
    }

    function getSelectedLevels() {
      const inputs = Array.from(document.querySelectorAll(levelCheckboxSelector)).filter((el) => isHtmlInputElement(el));
      const checked = inputs.filter((el) => el.checked);
      return checked.map((el) => el.dataset.levelId || '');
    }

    function getOptions() {
      const examOnlyEl = document.getElementById('optionsExamOnly');
      const longOnlyEl = document.getElementById('optionsLongOnly');
      const shortOnlyEl = document.getElementById('optionsShortOnly');
      const yearFromEl = document.getElementById('optionsYearFrom');
      const yearToEl = document.getElementById('optionsYearTo');
      
      const examOnly = examOnlyEl && examOnlyEl instanceof HTMLInputElement ? String(examOnlyEl.checked) : 'false';
      const longOnly = longOnlyEl && longOnlyEl instanceof HTMLInputElement ? String(longOnlyEl.checked) : 'false';
      const shortOnly = shortOnlyEl && shortOnlyEl instanceof HTMLInputElement ? String(shortOnlyEl.checked) : 'false';
      const yearFrom = yearFromEl && yearFromEl instanceof HTMLSelectElement ? yearFromEl.value : '2024';
      const yearTo = yearToEl && yearToEl instanceof HTMLSelectElement ? yearToEl.value : '2022';
      const levels = getSelectedLevels().join(',');
      
      return { examOnly, longOnly, shortOnly, yearFrom, yearTo, levels };
    }

    function updateGlobalButtonState() {
      const selected = getSelectedTopics();
      if (globalStartButton) {
        if (selected.length === 0) {
          globalStartButton.setAttribute('disabled', '');
        } else {
          globalStartButton.removeAttribute('disabled');
        }
      }

      if (selectionHintEl && selectedHeaderTagsContainer) {
        if (selected.length === 0) {
          selectionHintEl.classList.remove('hidden');
          selectedHeaderTagsContainer.classList.add('hidden');
        } else {
          selectionHintEl.classList.add('hidden');
          selectedHeaderTagsContainer.classList.remove('hidden');
        }
      }

      updateSelectAllState();
      renderHeaderSelectedTags(selected);
    }

    function renderHeaderSelectedTags(selected) {
      if (!selectedHeaderTagsContainer) return;
      selectedHeaderTagsContainer.innerHTML = '';
      selected.forEach((topic) => {
        const pill = document.createElement('span');
        pill.className = 'inline-flex items-center gap-2 px-3 py-1 rounded-full bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-200 text-sm shrink-0 whitespace-nowrap';
        pill.setAttribute('data-topic-id', topic.id);
        pill.innerHTML = `<span>${topic.title}</span>`;
        const btn = document.createElement('button');
        btn.type = 'button';
        btn.className = 'ml-1 rounded-full hover:bg-red-200 dark:hover:bg-red-800/50 w-5 h-5 flex items-center justify-center';
        btn.setAttribute('aria-label', `Remove ${topic.title}`);
        btn.setAttribute('data-remove-topic-id', topic.id);
        btn.innerHTML = '<span class="text-xs">×</span>';
        pill.appendChild(btn);
        selectedHeaderTagsContainer.appendChild(pill);
      });
    }

    function updateSelectAllState() {
      const inputs = getAllTopicInputs();
      const total = inputs.length;
      const selectedCount = inputs.filter((el) => el.checked).length;
      if (!(selectAllCheckbox instanceof HTMLInputElement)) return;
      if (selectedCount === 0) {
        selectAllCheckbox.checked = false;
        selectAllCheckbox.indeterminate = false;
      } else if (selectedCount === total) {
        selectAllCheckbox.checked = true;
        selectAllCheckbox.indeterminate = false;
      } else {
        selectAllCheckbox.checked = false;
        selectAllCheckbox.indeterminate = true;
      }
    }

    document.addEventListener('change', function (e) {
      const target = e.target;
      if (target instanceof Element && target.matches(checkboxSelector)) {
        updateGlobalButtonState();
      }
      if (target === selectAllCheckbox && selectAllCheckbox instanceof HTMLInputElement) {
        const inputs = getAllTopicInputs();
        inputs.forEach((el) => {
          if (el.checked !== selectAllCheckbox.checked) {
            el.checked = selectAllCheckbox.checked;
          }
        });
        updateGlobalButtonState();
      }
    });

    document.addEventListener('click', function (e) {
      const target = e.target;
      if (!(target instanceof Element)) return;

      if (optionsToggle && optionsPanel) {
        const clickedToggle = target.closest('#optionsToggle');
        const clickedInsidePanel = target.closest('#optionsPanel');
        if (clickedToggle) {
          const isHidden = optionsPanel.classList.contains('hidden');
          if (isHidden) {
            optionsPanel.classList.remove('hidden');
            optionsToggle.setAttribute('aria-expanded', 'true');
          } else {
            optionsPanel.classList.add('hidden');
            optionsToggle.setAttribute('aria-expanded', 'false');
          }
          return;
        } else if (!clickedInsidePanel) {
          optionsPanel.classList.add('hidden');
          optionsToggle.setAttribute('aria-expanded', 'false');
        }
      }

      const removeBtn = target.closest('[data-remove-topic-id]');
      if (removeBtn) {
        const id = removeBtn.getAttribute('data-remove-topic-id');
        if (id) {
          const input = document.querySelector(`input.topic-checkbox[data-topic-id="${id}"]`);
          if (input && input instanceof HTMLInputElement) {
            input.checked = false;
            updateGlobalButtonState();
          }
        }
        return;
      }

      const button = target.closest('button[data-topic-id]');
      if (button && button instanceof HTMLButtonElement) {
        const id = button.getAttribute('data-topic-id');
        if (id) {
          const opts = getOptions();
          const query = new URLSearchParams({ ...opts });
          window.location.href = `/maths/practice/${id}?${query.toString()}`;
        }
      }
    });

    if (globalStartButton) {
      globalStartButton.addEventListener('click', function () {
        const selected = getSelectedTopics();
        if (selected.length === 0) return;
        const opts = getOptions();
        const query = new URLSearchParams({ topics: selected.map((t) => t.id).join(','), ...opts });
        window.location.href = `/maths/practice/start?${query.toString()}`;
      });
    }

    updateGlobalButtonState();
  </script>
</Layout> 
