---
import Layout from '~/layouts/PageLayout.astro';

const metadata = {
  title: 'Maths - Practice',
};

interface Topic {
  id: string;
  title: string;
  description: string;
  category: 'Paper 1' | 'Paper 2';
}

const topics: Topic[] = [
  // Paper 1 Topics
  { id: 'number', title: 'Number Systems', description: 'Number sets, scientific notation, and arithmetic', category: 'Paper 1' },
  { id: 'algebra', title: 'Algebra', description: 'Equations, simultaneous equations, and polynomials', category: 'Paper 1' },
  { id: 'complex-numbers', title: 'Complex Numbers', description: 'Imaginary numbers, operations, and argand diagrams', category: 'Paper 1' },
  { id: 'sequences-and-series', title: 'Sequences & Series', description: 'Arithmetic and geometric sequences, summation', category: 'Paper 1' },
  { id: 'financial-maths', title: 'Financial Maths', description: 'Interest, loans, annuities, and investments', category: 'Paper 1' },
  { id: 'induction', title: 'Induction', description: 'Mathematical induction and proof techniques', category: 'Paper 1' },
  { id: 'functions', title: 'Functions', description: 'Domain, range, composition, and transformations', category: 'Paper 1' },
  { id: 'differentiation', title: 'Differentiation', description: 'Derivatives, rates of change, and optimization', category: 'Paper 1' },
  { id: 'integration', title: 'Integration', description: 'Antiderivatives, areas under curves, and definite integrals', category: 'Paper 1' },
  
  // Paper 2 Topics
  { id: 'the-line', title: 'The Line', description: 'Linear equations, slopes, and distance formulas', category: 'Paper 2' },
  { id: 'the-circle', title: 'The Circle', description: 'Circle equations, tangents, and intersections', category: 'Paper 2' },
  { id: 'geometry', title: 'Geometry', description: 'Shapes, theorems, and coordinate geometry', category: 'Paper 2' },
  { id: 'trigonometry', title: 'Trigonometry', description: 'Sin, cos, tan, identities, and equations', category: 'Paper 2' },
  { id: 'probability', title: 'Probability', description: 'Events, conditional probability, and distributions', category: 'Paper 2' },
  { id: 'statistics', title: 'Statistics', description: 'Data analysis, mean, median, and standard deviation', category: 'Paper 2' },
];

const paper1Topics = topics.filter(t => t.category === 'Paper 1');
const paper2Topics = topics.filter(t => t.category === 'Paper 2');
---
<Layout metadata={metadata}>
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <!-- Header -->
    <div class="mb-8">
      <h1 class="text-4xl font-bold text-gray-900 dark:text-white mb-2">Practice Maths</h1>
      <p class="text-lg text-gray-600 dark:text-gray-400">
        Test your skills with exam-style practice questions and solutions
      </p>
    </div>

    <!-- Settings Panel - Sticky at top -->
    <div class="sticky top-0 z-20 bg-white dark:bg-slate-800 rounded-lg shadow-md border border-gray-200 dark:border-slate-700 p-6 mb-8">
      <div class="flex flex-col md:flex-row items-start md:items-center justify-between gap-4 mb-4">
        <div class="flex-1 min-w-0">
          <p id="selectionHint" class="text-sm text-gray-600 dark:text-gray-400">
            Select topics to practice, or start with all questions
          </p>
          <div id="selectedHeaderTags" class="hidden flex flex-wrap gap-2 mt-2"></div>
        </div>
        <button 
          id="globalStart" 
          class="px-6 py-3 bg-gray-600 hover:bg-gray-700 text-white rounded-lg font-semibold transition-colors whitespace-nowrap"
        >
          Start Practice
        </button>
      </div>

      <!-- Advanced Filters -->
      <div class="border-t border-gray-200 dark:border-slate-700 pt-4">
        <button 
          id="optionsToggle" 
          type="button"
          class="flex items-center gap-2 text-gray-700 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white transition-colors"
          aria-expanded="false"
        >
          <svg class="w-5 h-5 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
          </svg>
          <span class="font-medium">Advanced Filters</span>
        </button>

        <div id="optionsPanel" class="hidden mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">
          <div class="space-y-3">
            <label class="flex items-center gap-2 text-sm text-gray-700 dark:text-gray-300 cursor-pointer">
              <input id="optionsExamOnly" type="checkbox" class="w-4 h-4 rounded accent-gray-600" />
              <span>State Exam Questions Only</span>
            </label>
            <label class="flex items-center gap-2 text-sm text-gray-700 dark:text-gray-300 cursor-pointer">
              <input id="optionsLongOnly" type="checkbox" class="w-4 h-4 rounded accent-gray-600" />
              <span>Long Questions Only</span>
            </label>
            <label class="flex items-center gap-2 text-sm text-gray-700 dark:text-gray-300 cursor-pointer">
              <input id="optionsShortOnly" type="checkbox" class="w-4 h-4 rounded accent-gray-600" />
              <span>Short Questions Only</span>
            </label>
            <label class="flex items-center gap-2 text-sm text-gray-700 dark:text-gray-300 cursor-pointer">
              <input id="optionsCustomOnly" type="checkbox" class="w-4 h-4 rounded accent-gray-600" />
              <span>Custom Questions Only</span>
            </label>
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Year Range</label>
            <div class="flex items-center gap-2">
              <select id="optionsYearFrom" class="flex-1 rounded-lg border border-gray-300 dark:border-slate-600 bg-white dark:bg-slate-700 text-gray-900 dark:text-gray-100 px-3 py-2">
                <option value="2024" selected>2024</option>
                <option value="2023">2023</option>
                <option value="2022">2022</option>
                <option value="2021">2021</option>
                <option value="2020">2020</option>
                <option value="2019">2019</option>
                <option value="2018">2018</option>
                <option value="2017">2017</option>
                <option value="2016">2016</option>
                <option value="2015">2015</option>
                <option value="2014">2014</option>
                <option value="2013">2013</option>
                <option value="2012">2012</option>
              </select>
              <span class="text-gray-500 dark:text-gray-400">to</span>
              <select id="optionsYearTo" class="flex-1 rounded-lg border border-gray-300 dark:border-slate-600 bg-white dark:bg-slate-700 text-gray-900 dark:text-gray-100 px-3 py-2">
                <option value="2024">2024</option>
                <option value="2023">2023</option>
                <option value="2022">2022</option>
                <option value="2021">2021</option>
                <option value="2020">2020</option>
                <option value="2019">2019</option>
                <option value="2018">2018</option>
                <option value="2017">2017</option>
                <option value="2016">2016</option>
                <option value="2015">2015</option>
                <option value="2014">2014</option>
                <option value="2013">2013</option>
                <option value="2012" selected>2012</option>
              </select>
            </div>
          </div>
        </div>
      </div>

      <!-- Select All -->
      <div class="border-t border-gray-200 dark:border-slate-700 pt-4 mt-4">
        <label class="flex items-center gap-2 text-sm text-gray-700 dark:text-gray-300 cursor-pointer">
          <input id="selectAll" type="checkbox" class="w-4 h-4 rounded accent-gray-600" />
          <span class="font-medium">Select all topics</span>
        </label>
      </div>
    </div>

    <!-- Paper 1 Topics -->
    <div class="mb-8">
      <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-4">Paper 1</h2>
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {paper1Topics.map((topic) => (
          <label class="topic-card bg-white dark:bg-slate-800 rounded-lg shadow-md border-2 border-gray-200 dark:border-slate-700 hover:border-gray-600 dark:hover:border-gray-500 transition-all cursor-pointer overflow-hidden group">
            <div class="p-5">
              <div class="flex items-start gap-3">
                <input 
                  type="checkbox" 
                  class="topic-checkbox w-5 h-5 mt-1 rounded accent-gray-600 cursor-pointer"
                  data-topic-id={topic.id}
                  data-topic-title={topic.title}
                />
                <div class="flex-1 min-w-0">
                  <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-1 group-hover:text-gray-600 dark:group-hover:text-gray-300 transition-colors">
                    {topic.title}
                  </h3>
                  <p class="text-sm text-gray-600 dark:text-gray-400">
                    {topic.description}
                  </p>
                </div>
              </div>
            </div>
          </label>
        ))}
      </div>
    </div>

    <!-- Paper 2 Topics -->
    <div>
      <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-4">Paper 2</h2>
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {paper2Topics.map((topic) => (
          <label class="topic-card bg-white dark:bg-slate-800 rounded-lg shadow-md border-2 border-gray-200 dark:border-slate-700 hover:border-gray-600 dark:hover:border-gray-500 transition-all cursor-pointer overflow-hidden group">
            <div class="p-5">
              <div class="flex items-start gap-3">
                <input 
                  type="checkbox" 
                  class="topic-checkbox w-5 h-5 mt-1 rounded accent-gray-600 cursor-pointer"
                  data-topic-id={topic.id}
                  data-topic-title={topic.title}
                />
                <div class="flex-1 min-w-0">
                  <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-1 group-hover:text-gray-600 dark:group-hover:text-gray-300 transition-colors">
                    {topic.title}
                  </h3>
                  <p class="text-sm text-gray-600 dark:text-gray-400">
                    {topic.description}
                  </p>
                </div>
              </div>
            </div>
          </label>
        ))}
      </div>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const checkboxSelector = '.topic-checkbox';
      const globalStartButton = document.getElementById('globalStart');
      const selectionHintEl = document.getElementById('selectionHint');
      const selectedHeaderTagsContainer = document.getElementById('selectedHeaderTags');
      const selectAllCheckbox = document.getElementById('selectAll');

      const optionsToggle = document.getElementById('optionsToggle');
      const optionsPanel = document.getElementById('optionsPanel');

      console.log('Options toggle:', optionsToggle);
      console.log('Options panel:', optionsPanel);

      function isHtmlInputElement(el) {
        return el instanceof HTMLInputElement;
      }

    function getAllTopicInputs() {
      return Array.from(document.querySelectorAll(checkboxSelector)).filter((el) => isHtmlInputElement(el));
    }

    function getSelectedTopics() {
      const inputs = getAllTopicInputs();
      const checkedInputs = inputs.filter((el) => el.checked);
      return checkedInputs.map((el) => ({ id: el.dataset.topicId || '', title: el.dataset.topicTitle || '' }));
    }

    function getOptions() {
      const examOnlyEl = document.getElementById('optionsExamOnly');
      const longOnlyEl = document.getElementById('optionsLongOnly');
      const shortOnlyEl = document.getElementById('optionsShortOnly');
      const yearFromEl = document.getElementById('optionsYearFrom');
      const yearToEl = document.getElementById('optionsYearTo');
      const customOnlyEl = document.getElementById('optionsCustomOnly');
      
      const examOnly = examOnlyEl && examOnlyEl instanceof HTMLInputElement ? String(examOnlyEl.checked) : 'false';
      const longOnly = longOnlyEl && longOnlyEl instanceof HTMLInputElement ? String(longOnlyEl.checked) : 'false';
      const shortOnly = shortOnlyEl && shortOnlyEl instanceof HTMLInputElement ? String(shortOnlyEl.checked) : 'false';
      const yearFrom = yearFromEl && yearFromEl instanceof HTMLSelectElement ? yearFromEl.value : '2024';
      const yearTo = yearToEl && yearToEl instanceof HTMLSelectElement ? yearToEl.value : '2012';
      const customOnly = customOnlyEl && customOnlyEl instanceof HTMLInputElement ? String(customOnlyEl.checked) : 'false';
      // If custom only, omit year and exam filtering at source to avoid sending unnecessary params
      if (customOnly === 'true') {
        return { customOnly, examOnly: 'false', longOnly, shortOnly, yearFrom: '', yearTo: '' };
      }
      return { examOnly, longOnly, shortOnly, yearFrom, yearTo, customOnly };
    }

    function updateGlobalButtonState() {
      const selected = getSelectedTopics();
      // Button is now always enabled - no need to disable when no topics selected

      if (selectionHintEl && selectedHeaderTagsContainer) {
        if (selected.length === 0) {
          selectionHintEl.classList.remove('hidden');
          selectedHeaderTagsContainer.classList.add('hidden');
        } else {
          selectionHintEl.classList.add('hidden');
          selectedHeaderTagsContainer.classList.remove('hidden');
        }
      }

      updateSelectAllState();
      renderHeaderSelectedTags(selected);
    }

    function renderHeaderSelectedTags(selected) {
      if (!selectedHeaderTagsContainer) return;
      selectedHeaderTagsContainer.innerHTML = '';
      selected.forEach((topic) => {
        const pill = document.createElement('span');
        pill.className = 'inline-flex items-center gap-2 px-3 py-1 rounded-full bg-gray-200 text-gray-700 dark:bg-slate-700 dark:text-gray-300 text-sm shrink-0 whitespace-nowrap';
        pill.setAttribute('data-topic-id', topic.id);
        pill.innerHTML = `<span>${topic.title}</span>`;
        const btn = document.createElement('button');
        btn.type = 'button';
        btn.className = 'ml-1 rounded-full hover:bg-gray-300 dark:hover:bg-slate-600 w-5 h-5 flex items-center justify-center';
        btn.setAttribute('aria-label', `Remove ${topic.title}`);
        btn.setAttribute('data-remove-topic-id', topic.id);
        btn.innerHTML = '<span class="text-xs">×</span>';
        pill.appendChild(btn);
        selectedHeaderTagsContainer.appendChild(pill);
      });
    }

    function updateSelectAllState() {
      const inputs = getAllTopicInputs();
      const total = inputs.length;
      const selectedCount = inputs.filter((el) => el.checked).length;
      if (!(selectAllCheckbox instanceof HTMLInputElement)) return;
      if (selectedCount === 0) {
        selectAllCheckbox.checked = false;
        selectAllCheckbox.indeterminate = false;
      } else if (selectedCount === total) {
        selectAllCheckbox.checked = true;
        selectAllCheckbox.indeterminate = false;
      } else {
        selectAllCheckbox.checked = false;
        selectAllCheckbox.indeterminate = true;
      }
    }

    document.addEventListener('change', function (e) {
      const target = e.target;
      if (target instanceof Element && target.matches(checkboxSelector)) {
        updateGlobalButtonState();
      }
      if (target === selectAllCheckbox && selectAllCheckbox instanceof HTMLInputElement) {
        const inputs = getAllTopicInputs();
        inputs.forEach((el) => {
          if (el.checked !== selectAllCheckbox.checked) {
            el.checked = selectAllCheckbox.checked;
          }
        });
        updateGlobalButtonState();
      }
    });

    document.addEventListener('click', function (e) {
      const target = e.target;
      if (!(target instanceof Element)) return;

      if (optionsToggle && optionsPanel) {
        const clickedToggle = target.closest('#optionsToggle');
        const clickedInsidePanel = target.closest('#optionsPanel');
        if (clickedToggle) {
          const isHidden = optionsPanel.classList.contains('hidden');
          if (isHidden) {
            optionsPanel.classList.remove('hidden');
            optionsToggle.setAttribute('aria-expanded', 'true');
          } else {
            optionsPanel.classList.add('hidden');
            optionsToggle.setAttribute('aria-expanded', 'false');
          }
          return;
        } else if (!clickedInsidePanel) {
          optionsPanel.classList.add('hidden');
          optionsToggle.setAttribute('aria-expanded', 'false');
        }
      }

      const removeBtn = target.closest('[data-remove-topic-id]');
      if (removeBtn) {
        const id = removeBtn.getAttribute('data-remove-topic-id');
        if (id) {
          const input = document.querySelector(`input.topic-checkbox[data-topic-id="${id}"]`);
          if (input && input instanceof HTMLInputElement) {
            input.checked = false;
            updateGlobalButtonState();
          }
        }
        return;
      }

      // Handle topic card clicks (new behavior)
      const topicCard = target.closest('.topic-card');
      if (topicCard && topicCard instanceof HTMLElement) {
        const id = topicCard.getAttribute('data-topic-id');
        if (id) {
          const opts = getOptions();
          const query = new URLSearchParams({ ...opts });
          window.location.href = `/maths/practice/${id}?${query.toString()}`;
        }
        return;
      }

      const button = target.closest('button[data-topic-id]');
      if (button && button instanceof HTMLButtonElement) {
        const id = button.getAttribute('data-topic-id');
        if (id) {
          const opts = getOptions();
          const query = new URLSearchParams({ ...opts });
          window.location.href = `/maths/practice/${id}?${query.toString()}`;
        }
      }
    });

    // Toggle advanced filters panel
    if (optionsToggle && optionsPanel) {
      optionsToggle.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        console.log('Toggle clicked');
        console.log('Panel before toggle:', optionsPanel.classList.contains('hidden'));
        console.log('Panel classList before:', optionsPanel.classList.toString());
        console.log('Panel display before:', window.getComputedStyle(optionsPanel).display);
        
        const isHidden = optionsPanel.classList.contains('hidden');
        
        if (isHidden) {
          optionsPanel.classList.remove('hidden');
          optionsToggle.setAttribute('aria-expanded', 'true');
        } else {
          optionsPanel.classList.add('hidden');
          optionsToggle.setAttribute('aria-expanded', 'false');
        }
        
        console.log('Panel after toggle:', optionsPanel.classList.contains('hidden'));
        console.log('Panel classList after:', optionsPanel.classList.toString());
        console.log('Panel display after:', window.getComputedStyle(optionsPanel).display);
        
        // Rotate chevron icon
        const svg = optionsToggle.querySelector('svg');
        if (svg) {
          if (isHidden) {
            svg.style.transform = 'rotate(90deg)';
          } else {
            svg.style.transform = 'rotate(0deg)';
          }
        }
      });
    }

    if (globalStartButton) {
      globalStartButton.addEventListener('click', function () {
        const selected = getSelectedTopics();
        const opts = getOptions();
        
        // Determine the topic ID for routing
        let topicId = 'all';
        if (selected.length === 1) {
          topicId = selected[0].id;
        } else if (selected.length > 1) {
          topicId = 'mixed';
        }
        
        // Build query parameters
        const queryParams = {
          topicId: topicId,
          topics: selected.length === 0 ? 'all' : selected.map((t) => t.id).join(','),
          ...opts
        };
        
        // Filter out empty/undefined values
        const safeParams = Object.fromEntries(
          Object.entries(queryParams).filter(([,v]) => v !== '' && v !== undefined)
        );
        
        // Navigate to mode selector page
        const query = new URLSearchParams(safeParams);
        window.location.href = `/maths/practice-mode-selector?${query.toString()}`;
      });
    }

    // When custom only is toggled, disable incompatible options (exam/year range) for clarity
    const customOnlyCheckbox = document.getElementById('optionsCustomOnly');
    function syncCustomOnlyDependencies() {
      const c = customOnlyCheckbox instanceof HTMLInputElement && customOnlyCheckbox.checked;
      const examOnlyEl = document.getElementById('optionsExamOnly');
      const yearFromEl = document.getElementById('optionsYearFrom');
      const yearToEl = document.getElementById('optionsYearTo');
      if (examOnlyEl instanceof HTMLInputElement) {
        examOnlyEl.disabled = c; if (c) examOnlyEl.checked = false;
      }
      [yearFromEl, yearToEl].forEach(sel => { if (sel instanceof HTMLSelectElement) sel.disabled = c; });
    }
    if (customOnlyCheckbox) {
      customOnlyCheckbox.addEventListener('change', () => { syncCustomOnlyDependencies(); });
      syncCustomOnlyDependencies();
    }

    updateGlobalButtonState();
    
    }); // End DOMContentLoaded
  </script>
</Layout> 
