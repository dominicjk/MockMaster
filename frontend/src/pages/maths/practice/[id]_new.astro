---
// src/pages/maths/practice/[id].astro
import Layout from '~/layouts/PageLayout.astro';

// âœ… REQUIRED for static/prerender builds on dynamic routes
export function getStaticPaths() {
  const ids = [
    'number','algebra','complex-numbers','sequences-and-series','financial-maths','induction',
    'functions','differentiation','integration','the-line','the-circle','geometry','trigonometry',
    'probability','statistics',
  ];
  return ids.map((id) => ({ params: { id } }));
}

const { id } = Astro.params;
const metadata = { title: `Practice - ${id}` };
---

<Layout metadata={metadata}>
  <!-- Main Content Container -->
  <div class="min-h-screen pb-24" style="margin-top: 120px;">
    <div class="p-6">
      <div class="flex gap-6">
        <!-- Left Sidebar (now inline) -->
        <div id="sidebar" class="w-80 bg-white dark:bg-slate-800 border border-gray-200 dark:border-slate-700 rounded-xl shadow-lg transform transition-all duration-300 relative">
          <div class="p-6 h-full">
            <!-- Header -->
            <div class="flex items-center justify-between mb-6 sidebar-content">
              <h2 class="text-xl font-bold text-gray-900 dark:text-white">Practice Menu</h2>
              <button id="sidebar-close" class="p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-slate-700">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
              </button>
            </div>
            
            <!-- Timer Section -->
            <div class="mb-8 sidebar-content">
              <div class="bg-gray-50 dark:bg-slate-700 rounded-lg p-4 mb-4">
                <div class="text-2xl font-mono font-bold text-center mb-3" id="sidebar-timer">00:00</div>
                <div class="flex gap-2">
                  <button id="timer-start" class="flex-1 px-3 py-2 bg-red-500 text-white rounded hover:bg-red-600 text-sm flex items-center justify-center" title="Start Timer">
                    <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M8 5v14l11-7z"/>
                    </svg>
                  </button>
                  <button id="timer-pause" class="flex-1 px-3 py-2 bg-yellow-500 text-white rounded hover:bg-yellow-600 text-sm flex items-center justify-center" title="Pause Timer">
                    <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M6 4h4v16H6V4zm8 0h4v16h-4V4z"/>
                    </svg>
                  </button>
                  <button id="timer-reset" class="flex-1 px-3 py-2 bg-red-500 text-white rounded hover:bg-red-600 text-sm flex items-center justify-center" title="Reset Timer">
                    <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M4 12a8 8 0 0 1 8-8V2.5L14.5 5 12 7.5V6a6 6 0 1 0-6 6H4z"/>
                    </svg>
                  </button>
                </div>
              </div>
            </div>

            <!-- Question Metadata -->
            <div class="mb-8 sidebar-content">
              <div class="space-y-3 text-sm">
                <div class="flex justify-between">
                  <span class="text-gray-600 dark:text-gray-400">Topic:</span>
                  <span id="meta-topic" class="font-medium">--</span>
                </div>
                <div class="flex justify-between">
                  <span class="text-gray-600 dark:text-gray-400">Difficulty:</span>
                  <span id="meta-difficulty" class="font-medium">--</span>
                </div>
                <div class="flex justify-between">
                  <span class="text-gray-600 dark:text-gray-400">Time Limit:</span>
                  <span id="meta-time-limit" class="font-medium">--</span>
                </div>
              </div>
            </div>

            <!-- Navigation -->
            <div class="mb-6 sidebar-content">
              <h3 class="text-lg font-semibold mb-4">Navigation</h3>
              <div class="flex gap-2 mb-4">
                <button id="prev-question" class="flex-1 px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600">
                  Previous
                </button>
                <button id="next-question" class="flex-1 px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600">
                  Next
                </button>
              </div>
              <button id="skip-question" class="w-full px-4 py-2 bg-yellow-500 text-white rounded hover:bg-yellow-600">
                Skip Question
              </button>
            </div>

            <!-- Action Buttons -->
            <div class="sidebar-content">
              <h3 class="text-lg font-semibold mb-4">Actions</h3>
              <div class="space-y-3">
                <button id="show-solution" class="w-full px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600">Show Solution</button>
                <div class="flex gap-2">
                  <button id="mark-correct" class="flex-1 px-3 py-2 bg-green-500 text-white rounded hover:bg-green-600 text-sm">Correct</button>
                  <button id="mark-wrong" class="flex-1 px-3 py-2 bg-red-500 text-white rounded hover:bg-red-600 text-sm">Wrong</button>
                </div>
                <button id="continue-next" class="w-full px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600 text-sm" style="display: none;">Continue to Next</button>
              </div>
            </div>

            <!-- Collapsed State Indicator -->
            <div id="collapsed-indicator" class="hidden text-center py-4">
              <div class="text-red-600 mb-2">
                <svg class="w-6 h-6 mx-auto" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M9 5v14l11-7z"/>
                </svg>
              </div>
              <div class="text-xs text-gray-500">Menu</div>
            </div>
          </div>
        </div>

        <!-- Right Content Panel -->
        <div id="question-panel" class="flex-1 space-y-6">
          <!-- Question Container -->
          <div class="w-full">
            <h3 class="text-lg font-semibold mb-3">Question</h3>
            <div class="bg-white dark:bg-slate-900 border border-gray-200 dark:border-slate-700 rounded-lg overflow-hidden">
              <div id="question-container" class="h-96 overflow-auto p-4">
                <div class="flex items-center justify-center h-full text-gray-500">
                  Loading question...
                </div>
              </div>
            </div>
          </div>

          <!-- Solution Container (Hidden initially) -->
          <div id="solution-container" class="w-full" style="display: none;">
            <h3 class="text-lg font-semibold mb-3">Solution</h3>
            <div class="bg-white dark:bg-slate-900 border border-gray-200 dark:border-slate-700 rounded-lg overflow-hidden">
              <div id="solution-content" class="h-96 overflow-auto p-4">
                <!-- Solution will be loaded here -->
              </div>
            </div>
          </div>
          
          <!-- Status Message -->
          <div class="w-full">
            <div id="status-message" class="text-center p-4 rounded-lg bg-gray-100 dark:bg-slate-800 text-gray-600 dark:text-gray-300">
              Welcome! Load a question to begin.
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    // Configuration 
    const API_BASE = 'http://localhost:3001';

    // Global state
    let currentQuestionData = null;
    let timerInterval = null;
    let startTime = null;
    let elapsedTime = 0;
    let isRunning = false;
    let sidebarVisible = true;

    // Timer functions
    function updateTimerDisplay() {
      const totalSeconds = Math.floor(elapsedTime / 1000);
      const minutes = Math.floor(totalSeconds / 60);
      const seconds = totalSeconds % 60;
      const display = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
      document.getElementById('sidebar-timer').textContent = display;
    }

    function startTimer() {
      if (!isRunning) {
        startTime = Date.now() - elapsedTime;
        timerInterval = setInterval(() => {
          elapsedTime = Date.now() - startTime;
          updateTimerDisplay();
        }, 1000);
        isRunning = true;
        
        // Update button icons
        document.getElementById('timer-start').innerHTML = '<svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24"><path d="M8 5v14l11-7z"/></svg>';
        document.getElementById('timer-pause').innerHTML = '<svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24"><path d="M6 4h4v16H6V4zm8 0h4v16h-4V4z"/></svg>';
      }
    }

    function pauseTimer() {
      if (isRunning) {
        clearInterval(timerInterval);
        isRunning = false;
      }
    }

    function resetTimer() {
      clearInterval(timerInterval);
      elapsedTime = 0;
      isRunning = false;
      updateTimerDisplay();
    }

    // Sidebar functions
    function toggleSidebar() {
      const sidebar = document.getElementById('sidebar');
      const questionPanel = document.getElementById('question-panel');
      const sidebarContent = document.querySelectorAll('.sidebar-content');
      const collapsedIndicator = document.getElementById('collapsed-indicator');
      const closeButton = document.getElementById('sidebar-close');
      
      if (sidebarVisible) {
        // Collapse sidebar - hide content but keep sidebar visible with minimal width
        sidebar.style.width = '60px'; // Minimal width to stay visible
        sidebarContent.forEach(el => el.style.display = 'none');
        if (collapsedIndicator) collapsedIndicator.style.display = 'block';
        if (closeButton) {
          closeButton.innerHTML = '<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path></svg>'; // Right arrow
        }
        sidebarVisible = false;
      } else {
        // Expand sidebar
        sidebar.style.width = '20rem'; // w-80 = 20rem
        sidebarContent.forEach(el => el.style.display = 'block');
        if (collapsedIndicator) collapsedIndicator.style.display = 'none';
        if (closeButton) {
          closeButton.innerHTML = '<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>'; // X
        }
        sidebarVisible = true;
      }
    }

    // Question functions
    async function loadQuestion() {
      try {
        const response = await fetch(`${API_BASE}/questions`);
        if (!response.ok) throw new Error('Failed to fetch question');
        
        currentQuestionData = await response.json();
        
        // Display question
        const questionContainer = document.getElementById('question-container');
        questionContainer.innerHTML = `<img src="${API_BASE}/questions/${currentQuestionData.imagePath}" alt="Question" style="max-width: 100%; height: auto;" />`;
        
        // Update metadata
        document.getElementById('meta-topic').textContent = currentQuestionData.topic || '--';
        document.getElementById('meta-difficulty').textContent = currentQuestionData.difficulty || '--';
        document.getElementById('meta-time-limit').textContent = currentQuestionData.timeLimit || '--';
        
      } catch (error) {
        console.error('Error loading question:', error);
        document.getElementById('question-container').innerHTML = '<div class="text-red-500">Error loading question</div>';
      }
    }

    function showSolution() {
      if (currentQuestionData && currentQuestionData.solutionPath) {
        const solutionContainer = document.getElementById('solution-container');
        const solutionContent = document.getElementById('solution-content');
        
        solutionContent.innerHTML = `<img src="${API_BASE}/questions/${currentQuestionData.solutionPath}" alt="Solution" style="max-width: 100%; height: auto;" />`;
        solutionContainer.style.display = 'block';
        
        // Show marking buttons
        document.getElementById('continue-next').style.display = 'inline-block';
        document.getElementById('mark-correct').style.display = 'inline-block';
        document.getElementById('mark-wrong').style.display = 'inline-block';
        document.getElementById('show-solution').style.display = 'none';
      }
    }

    function markAnswer(isCorrect) {
      const message = isCorrect ? 
        '<span class="text-green-600 font-medium">Marked as Correct âœ“</span>' : 
        '<span class="text-red-600 font-medium">Marked as Wrong âœ—</span>';
      
      document.getElementById('status-message').innerHTML = message;
      
      // Hide solution and reset buttons
      document.getElementById('solution-container').style.display = 'none';
      document.getElementById('show-solution').style.display = 'inline-block';
      document.getElementById('mark-correct').style.display = 'none';
      document.getElementById('mark-wrong').style.display = 'none';
      document.getElementById('continue-next').style.display = 'none';
    }

    // Event handlers
    document.addEventListener('DOMContentLoaded', () => {
      // Load initial question
      loadQuestion();

      // Timer controls
      document.getElementById('timer-start').addEventListener('click', () => {
        if (isRunning) {
          pauseTimer();
        } else {
          startTimer();
        }
      });
      document.getElementById('timer-pause').addEventListener('click', pauseTimer);
      document.getElementById('timer-reset').addEventListener('click', resetTimer);
      
      // Sidebar controls
      document.getElementById('sidebar-close').addEventListener('click', toggleSidebar);
      
      // Action buttons
      document.getElementById('show-solution').addEventListener('click', showSolution);
      document.getElementById('mark-correct').addEventListener('click', () => markAnswer(true));
      document.getElementById('mark-wrong').addEventListener('click', () => markAnswer(false));
      
      // Navigation buttons  
      document.getElementById('prev-question').addEventListener('click', () => {
        document.getElementById('status-message').textContent = 'Previous question functionality coming soon...';
      });
      document.getElementById('next-question').addEventListener('click', () => {
        document.getElementById('status-message').textContent = 'Next question functionality coming soon...';
      });
      document.getElementById('skip-question').addEventListener('click', () => {
        document.getElementById('status-message').innerHTML = '<span class="text-yellow-600 font-medium">Question skipped</span>';
        document.getElementById('continue-next').style.display = 'inline-block';
      });
      
      document.getElementById('continue-next').addEventListener('click', () => {
        document.getElementById('status-message').textContent = 'Loading next question...';
        loadQuestion();
        document.getElementById('solution-container').style.display = 'none';
        document.getElementById('show-solution').style.display = 'inline-block';
        document.getElementById('mark-correct').style.display = 'none';
        document.getElementById('mark-wrong').style.display = 'none';
        document.getElementById('continue-next').style.display = 'none';
      });
    });
  </script>

  <style>
    #sidebar {
      transition: all 0.3s ease;
      width: 20rem; /* w-80 */
      flex-shrink: 0;
      overflow-y: auto;
      position: relative;
    }

    .sidebar-content {
      transition: all 0.3s ease;
    }

    #collapsed-indicator {
      transition: all 0.3s ease;
    }

    #question-panel {
      transition: margin-left 0.3s ease;
    }
  </style>
</Layout>
